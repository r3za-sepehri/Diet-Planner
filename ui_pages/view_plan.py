import streamlit as st
import pandas as pd
from . import ui_utils
from streamlit.components.v1 import html

def display_plan_and_prompt_page(PRICES, ai_planner):
    """Renders the UI for Step 4: Viewing the plan and generating AI prompts."""
    
    if st.session_state.get('scroll_to_top', False):
        html("<script>window.scrollTo(0, 0);</script>", height=0)
        st.session_state.scroll_to_top = False

    st.header("Step 4: View Plan & Generate Prompts", divider='rainbow')
    
    if not st.session_state.get('plan_results'):
        st.warning("Please generate a food plan in Step 3 first.")
        st.button("‚¨ÖÔ∏è Go back to Step 3", on_click=ui_utils.go_to_page, args=("Step 3: Customize Plan Details",), use_container_width=True)
        return

    st.info(f"Displaying the generated **{st.session_state.plan_source}**.")
    
    st.header("Plan Summary", divider='gray')
    col1, col2 = st.columns(2)

    shopping_list = {}
    for day_foods in st.session_state.plan_results.values():
        for food, grams in day_foods.items():
            shopping_list[food] = shopping_list.get(food, 0) + grams

    prices_for_summary = PRICES.copy()
    if st.session_state.custom_prices:
        for food, price in st.session_state.custom_prices.items():
            if food in prices_for_summary.index:
                prices_for_summary.loc[food] = price

    total_cost = sum(prices_for_summary.get(food, 0) * grams for food, grams in shopping_list.items())
    rounded_cost = int(round(total_cost, -4))
    col1.metric("Estimated Weekly Cost", f"‚âà {rounded_cost:,.0f} IRR")

    unique_foods = len(shopping_list)
    col2.metric("Unique Foods in Plan", f"{unique_foods} items")
    
    st.divider()

    st.subheader("üìã Your Weekly Plan & Shopping List")
    with st.expander("View Weekly Shopping List", expanded=True):
        shop_df = pd.DataFrame.from_dict(shopping_list, orient='index', columns=['Total Grams'])
        shop_df['Food Item'] = shop_df.index.map(ui_utils._format_name)
        # --- UPDATED: Using the new smart_round_grams function ---
        shop_df['Total Grams'] = shop_df['Total Grams'].apply(lambda x: f"{ui_utils.smart_round_grams(x)} g")
        shop_df = shop_df[['Food Item', 'Total Grams']]
        st.dataframe(shop_df, use_container_width=True, hide_index=True)
        
    for day, foods in st.session_state.plan_results.items():
        with st.expander(f"View Plan for {ui_utils._format_name(day)}"):
            if foods:
                day_df = pd.DataFrame.from_dict(foods, orient='index', columns=['Grams'])
                day_df['Food Item'] = day_df.index.map(ui_utils._format_name)
                # --- UPDATED: Using the new smart_round_grams function ---
                day_df['Grams'] = day_df['Grams'].apply(lambda x: f"{ui_utils.smart_round_grams(x)} g")
                day_df = day_df[['Food Item', 'Grams']]
                st.dataframe(day_df, use_container_width=True, hide_index=True)
            else: 
                st.write("No food items for this day.")

    st.divider()

    st.subheader("ü§ñ Get AI Prompts for Meal Planning")
    st.markdown("Add details below to customize the recipes generated by the AI.")
    
    with st.form("ai_prompt_prefs"):
        col1, col2 = st.columns(2)
        with col1:
            st.selectbox(
                "Preferred Cuisine Style",
                ["Any", "Variety (Different Each Day)", "Mediterranean", "Italian", "Mexican", "Persian", "Asian-inspired", "Indian-inspired", "Quick & Easy"],
                key='ai_cuisine'
            )
        with col2:
            st.slider(
                "Max Cooking Time per Meal (minutes)",
                min_value=15, max_value=90, value=30, step=5,
                key='ai_cook_time'
            )
        st.text_area(
            "Other Instructions for the AI Chef",
            placeholder="e.g., I prefer recipes that are good for meal prep. I don't like spicy food.",
            key='ai_custom_instructions'
        )
        st.form_submit_button("Update Prompt Preferences", use_container_width=True)

    st.caption("Click the tabs below to view the updated prompt for each day.")

    prompt_prefs = {
        'goal': st.session_state.dietary_goal_selected,
        'cuisine': st.session_state.ai_cuisine,
        'cook_time': st.session_state.ai_cook_time,
        'custom_instructions': st.session_state.ai_custom_instructions
    }
    
    all_prompts = []
    for day_key, day_solution in st.session_state.plan_results.items():
        # --- UPDATED: Using the new smart_round_grams function for the prompt ---
        rounded_solution = {food: ui_utils.smart_round_grams(grams) for food, grams in day_solution.items()}
        prompt = ai_planner.create_prompt_for_user(
            rounded_solution, day_key, st.session_state.user_data['num_meals'], 
            st.session_state.user_data['num_snacks'], prompt_prefs
        )
        all_prompts.append({'day': ui_utils._format_name(day_key), 'prompt': prompt})

    day_tabs = st.tabs([p['day'] for p in all_prompts])
    for i, tab in enumerate(day_tabs):
        with tab:
            st.code(all_prompts[i]['prompt'], language='text')
    
    full_text_for_download = ("\n\n" + "="*80 + "\n\n").join([p['prompt'] for p in all_prompts])
    st.download_button(label="Download All Prompts as a Text File", data=full_text_for_download.encode('utf-8'), file_name="ai_meal_prompts.txt", mime="text/plain", use_container_width=True)
    
    st.divider()
    col1, col2 = st.columns(2)
    with col1:
        st.button("‚¨ÖÔ∏è Previous: Customize Plan", on_click=ui_utils.go_to_page, args=("Step 3: Customize Plan Details",), use_container_width=True)
    with col2:
        with st.expander("üéâ Start a New Plan"):
            st.warning("This will clear your current profile and plan. Are you sure you want to continue?")
            if st.button("Yes, start over", use_container_width=True, type="primary"):
                st.session_state.nutrient_reqs = None
                st.session_state.plan_results = None
                st.session_state.dietary_goal_selected = None
                st.session_state.variety_cost_level = 3
                ui_utils.go_to_page("Step 1: Your Profile")
                st.rerun()